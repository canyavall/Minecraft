/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  com.github.alexthe666.citadel.client.model.AdvancedEntityModel
 *  com.github.alexthe666.citadel.client.model.AdvancedModelBox
 *  com.github.alexthe666.citadel.client.model.basic.BasicModelPart
 *  com.google.common.collect.ImmutableList
 *  net.minecraft.client.Minecraft
 *  net.minecraft.util.Mth
 *  net.minecraft.world.entity.Entity
 *  net.minecraft.world.phys.Vec3
 */
package com.github.alexthe666.alexsmobs.client.model;

import com.github.alexthe666.alexsmobs.entity.EntityGiantSquid;
import com.github.alexthe666.alexsmobs.entity.util.Maths;
import com.github.alexthe666.citadel.client.model.AdvancedEntityModel;
import com.github.alexthe666.citadel.client.model.AdvancedModelBox;
import com.github.alexthe666.citadel.client.model.basic.BasicModelPart;
import com.google.common.collect.ImmutableList;
import net.minecraft.client.Minecraft;
import net.minecraft.util.Mth;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.phys.Vec3;

public class ModelGiantSquid
extends AdvancedEntityModel<EntityGiantSquid> {
    private final AdvancedModelBox root;
    private final AdvancedModelBox head;
    private final AdvancedModelBox beak;
    private final AdvancedModelBox left_FrontTentacle;
    private final AdvancedModelBox left_FrontTentacleEnd;
    private final AdvancedModelBox left_FrontMidTentacle;
    private final AdvancedModelBox left_FrontMidTentacleEnd;
    private final AdvancedModelBox right_FrontMidTentacle;
    private final AdvancedModelBox right_FrontMidTentacleEnd;
    private final AdvancedModelBox left_BackMidTentacle;
    private final AdvancedModelBox left_BackMidTentacleEnd;
    private final AdvancedModelBox right_BackMidTentacle;
    private final AdvancedModelBox right_BackMidTentacleEnd;
    private final AdvancedModelBox left_BackTentacle;
    private final AdvancedModelBox left_BackTentacleEnd;
    private final AdvancedModelBox right_BackTentacle;
    private final AdvancedModelBox right_BackTentacleEnd;
    private final AdvancedModelBox right_FrontTentacle;
    private final AdvancedModelBox right_tentacleEnd;
    private final AdvancedModelBox left_arm;
    private final AdvancedModelBox left_arm2;
    private final AdvancedModelBox left_arm3;
    private final AdvancedModelBox left_arm4;
    private final AdvancedModelBox left_hand;
    private final AdvancedModelBox right_arm;
    private final AdvancedModelBox right_arm2;
    private final AdvancedModelBox right_arm3;
    private final AdvancedModelBox right_arm4;
    private final AdvancedModelBox right_hand;
    private final AdvancedModelBox left_eye;
    private final AdvancedModelBox left_pupil;
    private final AdvancedModelBox left_pupil_pivot;
    private final AdvancedModelBox right_pupil_pivot;
    private final AdvancedModelBox right_eye;
    private final AdvancedModelBox right_pupil;
    private final AdvancedModelBox mantle;
    private final AdvancedModelBox mantle_end;
    private final AdvancedModelBox left_membrane;
    private final AdvancedModelBox right_membrane;

    public ModelGiantSquid() {
        this.texWidth = 128;
        this.texHeight = 128;
        this.root = new AdvancedModelBox((AdvancedEntityModel)this, "root");
        this.root.setRotationPoint(0.0f, 24.0f, 0.0f);
        this.head = new AdvancedModelBox((AdvancedEntityModel)this, "head");
        this.head.setRotationPoint(0.0f, -5.0f, 0.0f);
        this.root.addChild((BasicModelPart)this.head);
        this.head.setTextureOffset(43, 35).addBox(-5.0f, -9.0f, -5.0f, 10.0f, 14.0f, 10.0f, 0.0f, false);
        this.beak = new AdvancedModelBox((AdvancedEntityModel)this, "beak");
        this.beak.setRotationPoint(0.0f, 5.0f, 0.0f);
        this.head.addChild((BasicModelPart)this.beak);
        this.beak.setTextureOffset(41, 0).addBox(-1.5f, 0.0f, -2.0f, 3.0f, 2.0f, 4.0f, 0.0f, false);
        this.left_FrontTentacle = new AdvancedModelBox((AdvancedEntityModel)this, "left_FrontTentacle");
        this.left_FrontTentacle.setRotationPoint(1.5f, 5.0f, -4.0f);
        this.head.addChild((BasicModelPart)this.left_FrontTentacle);
        this.left_FrontTentacle.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.left_FrontTentacleEnd = new AdvancedModelBox((AdvancedEntityModel)this, "left_FrontTentacleEnd");
        this.left_FrontTentacleEnd.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.left_FrontTentacle.addChild((BasicModelPart)this.left_FrontTentacleEnd);
        this.left_FrontTentacleEnd.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.left_FrontMidTentacle = new AdvancedModelBox((AdvancedEntityModel)this, "left_FrontMidTentacle");
        this.left_FrontMidTentacle.setRotationPoint(4.0f, 5.0f, -2.0f);
        this.head.addChild((BasicModelPart)this.left_FrontMidTentacle);
        this.setRotationAngle(this.left_FrontMidTentacle, 0.0f, -1.5708f, 0.0f);
        this.left_FrontMidTentacle.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.left_FrontMidTentacleEnd = new AdvancedModelBox((AdvancedEntityModel)this, "left_FrontMidTentacleEnd");
        this.left_FrontMidTentacleEnd.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.left_FrontMidTentacle.addChild((BasicModelPart)this.left_FrontMidTentacleEnd);
        this.left_FrontMidTentacleEnd.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.right_FrontMidTentacle = new AdvancedModelBox((AdvancedEntityModel)this, "right_FrontMidTentacle");
        this.right_FrontMidTentacle.setRotationPoint(-4.0f, 5.0f, -2.0f);
        this.head.addChild((BasicModelPart)this.right_FrontMidTentacle);
        this.setRotationAngle(this.right_FrontMidTentacle, 0.0f, 1.5708f, 0.0f);
        this.right_FrontMidTentacle.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.right_FrontMidTentacleEnd = new AdvancedModelBox((AdvancedEntityModel)this, "right_FrontMidTentacleEnd");
        this.right_FrontMidTentacleEnd.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.right_FrontMidTentacle.addChild((BasicModelPart)this.right_FrontMidTentacleEnd);
        this.right_FrontMidTentacleEnd.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.left_BackMidTentacle = new AdvancedModelBox((AdvancedEntityModel)this, "left_BackMidTentacle");
        this.left_BackMidTentacle.setRotationPoint(4.0f, 5.0f, 2.0f);
        this.head.addChild((BasicModelPart)this.left_BackMidTentacle);
        this.setRotationAngle(this.left_BackMidTentacle, 0.0f, -1.3963f, 0.0f);
        this.left_BackMidTentacle.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.left_BackMidTentacleEnd = new AdvancedModelBox((AdvancedEntityModel)this, "left_BackMidTentacleEnd");
        this.left_BackMidTentacleEnd.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.left_BackMidTentacle.addChild((BasicModelPart)this.left_BackMidTentacleEnd);
        this.left_BackMidTentacleEnd.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.right_BackMidTentacle = new AdvancedModelBox((AdvancedEntityModel)this, "right_BackMidTentacle");
        this.right_BackMidTentacle.setRotationPoint(-4.0f, 5.0f, 2.0f);
        this.head.addChild((BasicModelPart)this.right_BackMidTentacle);
        this.setRotationAngle(this.right_BackMidTentacle, 0.0f, 1.3963f, 0.0f);
        this.right_BackMidTentacle.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.right_BackMidTentacleEnd = new AdvancedModelBox((AdvancedEntityModel)this, "right_BackMidTentacleEnd");
        this.right_BackMidTentacleEnd.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.right_BackMidTentacle.addChild((BasicModelPart)this.right_BackMidTentacleEnd);
        this.right_BackMidTentacleEnd.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.left_BackTentacle = new AdvancedModelBox((AdvancedEntityModel)this, "left_BackTentacle");
        this.left_BackTentacle.setRotationPoint(2.0f, 5.0f, 4.0f);
        this.head.addChild((BasicModelPart)this.left_BackTentacle);
        this.setRotationAngle(this.left_BackTentacle, 0.0f, 3.1416f, 0.0f);
        this.left_BackTentacle.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.left_BackTentacleEnd = new AdvancedModelBox((AdvancedEntityModel)this, "left_BackTentacleEnd");
        this.left_BackTentacleEnd.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.left_BackTentacle.addChild((BasicModelPart)this.left_BackTentacleEnd);
        this.left_BackTentacleEnd.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.right_BackTentacle = new AdvancedModelBox((AdvancedEntityModel)this, "right_BackTentacle");
        this.right_BackTentacle.setRotationPoint(-2.0f, 5.0f, 4.0f);
        this.head.addChild((BasicModelPart)this.right_BackTentacle);
        this.setRotationAngle(this.right_BackTentacle, 0.0f, -3.1416f, 0.0f);
        this.right_BackTentacle.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.right_BackTentacleEnd = new AdvancedModelBox((AdvancedEntityModel)this, "right_BackTentacleEnd");
        this.right_BackTentacleEnd.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.right_BackTentacle.addChild((BasicModelPart)this.right_BackTentacleEnd);
        this.right_BackTentacleEnd.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.right_FrontTentacle = new AdvancedModelBox((AdvancedEntityModel)this, "right_FrontTentacle");
        this.right_FrontTentacle.setRotationPoint(-1.5f, 5.0f, -4.0f);
        this.head.addChild((BasicModelPart)this.right_FrontTentacle);
        this.right_FrontTentacle.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.right_tentacleEnd = new AdvancedModelBox((AdvancedEntityModel)this, "right_tentacleEnd");
        this.right_tentacleEnd.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.right_FrontTentacle.addChild((BasicModelPart)this.right_tentacleEnd);
        this.right_tentacleEnd.setTextureOffset(18, 70).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.left_arm = new AdvancedModelBox((AdvancedEntityModel)this, "left_arm");
        this.left_arm.setRotationPoint(3.0f, 5.0f, 0.0f);
        this.head.addChild((BasicModelPart)this.left_arm);
        this.setRotationAngle(this.left_arm, 0.0f, -1.5708f, 0.0f);
        this.left_arm.setTextureOffset(32, 66).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, false);
        this.left_arm2 = new AdvancedModelBox((AdvancedEntityModel)this, "left_arm2");
        this.left_arm2.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.left_arm.addChild((BasicModelPart)this.left_arm2);
        this.left_arm2.setTextureOffset(45, 60).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 35.0f, 2.0f, 0.0f, false);
        this.left_arm3 = new AdvancedModelBox((AdvancedEntityModel)this, "left_arm3");
        this.left_arm3.setRotationPoint(0.0f, 35.0f, 0.0f);
        this.left_arm2.addChild((BasicModelPart)this.left_arm3);
        this.left_arm3.setTextureOffset(45, 60).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 35.0f, 2.0f, 0.0f, false);
        this.left_arm4 = new AdvancedModelBox((AdvancedEntityModel)this, "left_arm4");
        this.left_arm4.setRotationPoint(0.0f, 35.0f, 0.0f);
        this.left_arm3.addChild((BasicModelPart)this.left_arm4);
        this.left_arm4.setTextureOffset(45, 60).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 35.0f, 2.0f, 0.0f, false);
        this.left_hand = new AdvancedModelBox((AdvancedEntityModel)this, "left_hand");
        this.left_hand.setRotationPoint(0.0f, 35.0f, 0.0f);
        this.left_arm4.addChild((BasicModelPart)this.left_hand);
        this.left_hand.setTextureOffset(54, 60).addBox(-3.0f, 0.0f, -1.3f, 6.0f, 14.0f, 3.0f, 0.0f, false);
        this.right_arm = new AdvancedModelBox((AdvancedEntityModel)this, "right_arm");
        this.right_arm.setRotationPoint(-3.0f, 5.0f, 0.0f);
        this.head.addChild((BasicModelPart)this.right_arm);
        this.setRotationAngle(this.right_arm, 0.0f, 1.5708f, 0.0f);
        this.right_arm.setTextureOffset(32, 66).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 20.0f, 2.0f, 0.0f, true);
        this.right_arm2 = new AdvancedModelBox((AdvancedEntityModel)this, "right_arm2");
        this.right_arm2.setRotationPoint(0.0f, 20.0f, 0.0f);
        this.right_arm.addChild((BasicModelPart)this.right_arm2);
        this.right_arm2.setTextureOffset(45, 60).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 35.0f, 2.0f, 0.0f, true);
        this.right_arm3 = new AdvancedModelBox((AdvancedEntityModel)this, "right_arm3");
        this.right_arm3.setRotationPoint(0.0f, 35.0f, 0.0f);
        this.right_arm2.addChild((BasicModelPart)this.right_arm3);
        this.right_arm3.setTextureOffset(45, 60).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 35.0f, 2.0f, 0.0f, true);
        this.right_arm4 = new AdvancedModelBox((AdvancedEntityModel)this, "right_arm4");
        this.right_arm4.setRotationPoint(0.0f, 35.0f, 0.0f);
        this.right_arm3.addChild((BasicModelPart)this.right_arm4);
        this.right_arm4.setTextureOffset(45, 60).addBox(-1.0f, 0.0f, -1.0f, 2.0f, 35.0f, 2.0f, 0.0f, true);
        this.right_hand = new AdvancedModelBox((AdvancedEntityModel)this, "right_hand");
        this.right_hand.setRotationPoint(0.0f, 35.0f, 0.0f);
        this.right_arm4.addChild((BasicModelPart)this.right_hand);
        this.right_hand.setTextureOffset(54, 60).addBox(-3.0f, 0.0f, -1.3f, 6.0f, 14.0f, 3.0f, 0.0f, true);
        this.left_eye = new AdvancedModelBox((AdvancedEntityModel)this, "left_eye");
        this.left_eye.setRotationPoint(5.9f, 0.5f, 0.0f);
        this.head.addChild((BasicModelPart)this.left_eye);
        this.left_eye.setTextureOffset(53, 19).addBox(-1.5f, -3.5f, -3.5f, 3.0f, 7.0f, 7.0f, 0.0f, false);
        this.left_pupil_pivot = new AdvancedModelBox((AdvancedEntityModel)this, "left_pupil_pivot");
        this.left_pupil_pivot.setRotationPoint(1.55f, 0.0f, 0.0f);
        this.left_eye.addChild((BasicModelPart)this.left_pupil_pivot);
        this.left_pupil = new AdvancedModelBox((AdvancedEntityModel)this, "left_pupil");
        this.left_pupil_pivot.addChild((BasicModelPart)this.left_pupil);
        this.left_pupil.setTextureOffset(0, 0).addBox(0.0f, -2.5f, -2.5f, 0.0f, 5.0f, 5.0f, 0.0f, false);
        this.right_eye = new AdvancedModelBox((AdvancedEntityModel)this, "right_eye");
        this.right_eye.setRotationPoint(-5.9f, 0.5f, 0.0f);
        this.head.addChild((BasicModelPart)this.right_eye);
        this.right_eye.setTextureOffset(53, 19).addBox(-1.5f, -3.5f, -3.5f, 3.0f, 7.0f, 7.0f, 0.0f, true);
        this.right_pupil_pivot = new AdvancedModelBox((AdvancedEntityModel)this, "right_pupil_pivot");
        this.right_pupil_pivot.setRotationPoint(-1.55f, 0.0f, 0.0f);
        this.right_eye.addChild((BasicModelPart)this.right_pupil_pivot);
        this.right_pupil = new AdvancedModelBox((AdvancedEntityModel)this, "right_pupil");
        this.right_pupil_pivot.addChild((BasicModelPart)this.right_pupil);
        this.right_pupil.setTextureOffset(0, 0).addBox(0.0f, -2.5f, -2.5f, 0.0f, 5.0f, 5.0f, 0.0f, true);
        this.mantle = new AdvancedModelBox((AdvancedEntityModel)this, "mantle");
        this.mantle.setRotationPoint(0.0f, -5.0f, 0.0f);
        this.head.addChild((BasicModelPart)this.mantle);
        this.mantle.setTextureOffset(0, 0).addBox(-7.0f, -31.0f, -6.0f, 14.0f, 32.0f, 12.0f, 0.0f, false);
        this.mantle_end = new AdvancedModelBox((AdvancedEntityModel)this, "mantle_end");
        this.mantle_end.setRotationPoint(0.0f, -31.0f, 0.0f);
        this.mantle.addChild((BasicModelPart)this.mantle_end);
        this.mantle_end.setTextureOffset(53, 0).addBox(-4.0f, -7.0f, -4.0f, 8.0f, 10.0f, 8.0f, 0.0f, false);
        this.left_membrane = new AdvancedModelBox((AdvancedEntityModel)this, "left_membrane");
        this.left_membrane.setRotationPoint(0.0f, -2.0f, 0.0f);
        this.mantle_end.addChild((BasicModelPart)this.left_membrane);
        this.left_membrane.setTextureOffset(0, 45).addBox(0.0f, -12.0f, 0.0f, 17.0f, 24.0f, 0.0f, 0.0f, false);
        this.right_membrane = new AdvancedModelBox((AdvancedEntityModel)this, "right_membrane");
        this.right_membrane.setRotationPoint(0.0f, -2.0f, 0.0f);
        this.mantle_end.addChild((BasicModelPart)this.right_membrane);
        this.right_membrane.setTextureOffset(0, 45).addBox(-17.0f, -12.0f, 0.0f, 17.0f, 24.0f, 0.0f, 0.0f, true);
        this.updateDefaultPose();
    }

    public Iterable<BasicModelPart> parts() {
        return ImmutableList.of((Object)this.root);
    }

    public void setupAnim(EntityGiantSquid entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        Entity look;
        this.resetToDefaultPose();
        float swimSpeed = 0.2f;
        float swimDegree = 0.4f;
        float idleSpeed = 0.05f;
        float idleDegree = 0.02f;
        float flailSpeed = 0.3f;
        float flailDegree = 0.4f;
        float partialTick = ageInTicks - (float)entity.f_19797_;
        float dryProgress = entity.prevDryProgress + (entity.dryProgress - entity.prevDryProgress) * partialTick;
        float capturedProgress = entity.prevCapturedProgress + (entity.capturedProgress - entity.prevCapturedProgress) * partialTick;
        float grabProgress = entity.prevGrabProgress + (entity.grabProgress - entity.prevGrabProgress) * partialTick;
        float pitch = entity.prevSquidPitch + (entity.getSquidPitch() - entity.prevSquidPitch) * partialTick;
        float f = (pitch - 90.0f) * ((float)Math.PI / 180);
        float f1 = (float)Math.sin(swimSpeed * limbSwing) * swimDegree * limbSwingAmount;
        float stretchy = 0.9f + 0.2f * f1;
        float stretchyXZ = 0.95f - 0.1f * f1;
        float flailAmount = capturedProgress * 0.2f;
        this.head.rotateAngleX += f;
        this.right_pupil_pivot.rotateAngleX -= f;
        this.left_pupil_pivot.rotateAngleX -= f;
        this.mantle.setScale(stretchyXZ, stretchy, stretchyXZ - dryProgress * 0.05f);
        this.mantle.setShouldScaleChildren(true);
        float contractFromGrab = 1.0f - 0.2f * grabProgress;
        this.right_arm2.rotateAngleX -= contractFromGrab * this.getArmRot(entity, 2, partialTick, false);
        this.left_arm2.rotateAngleX += contractFromGrab * this.getArmRot(entity, 2, partialTick, false);
        this.right_arm2.rotateAngleX -= contractFromGrab * this.getArmRot(entity, 4, partialTick, false);
        this.left_arm2.rotateAngleX += contractFromGrab * this.getArmRot(entity, 4, partialTick, false);
        this.right_arm3.rotateAngleX -= contractFromGrab * this.getArmRot(entity, 8, partialTick, false);
        this.left_arm3.rotateAngleX += contractFromGrab * this.getArmRot(entity, 8, partialTick, false);
        this.right_arm4.rotateAngleX -= contractFromGrab * this.getArmRot(entity, 12, partialTick, false);
        this.left_arm4.rotateAngleX += contractFromGrab * this.getArmRot(entity, 12, partialTick, false);
        this.right_arm2.rotateAngleZ += contractFromGrab * this.getArmRot(entity, 2, partialTick, true);
        this.left_arm2.rotateAngleZ -= contractFromGrab * this.getArmRot(entity, 2, partialTick, true);
        this.right_arm2.rotateAngleZ += contractFromGrab * this.getArmRot(entity, 4, partialTick, true);
        this.left_arm2.rotateAngleZ -= contractFromGrab * this.getArmRot(entity, 4, partialTick, true);
        this.right_arm3.rotateAngleZ += contractFromGrab * this.getArmRot(entity, 6, partialTick, true);
        this.left_arm3.rotateAngleZ -= contractFromGrab * this.getArmRot(entity, 6, partialTick, true);
        this.right_arm4.rotateAngleZ += contractFromGrab * this.getArmRot(entity, 8, partialTick, true);
        this.left_arm4.rotateAngleZ -= contractFromGrab * this.getArmRot(entity, 8, partialTick, true);
        this.progressRotationPrev(this.mantle_end, dryProgress, Maths.rad(-10.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.right_membrane, dryProgress, 0.0f, Maths.rad(20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.left_membrane, dryProgress, 0.0f, Maths.rad(-20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.mantle, dryProgress, 0.0f, 0.0f, Maths.rad(15.0), 5.0f);
        this.progressRotationPrev(this.left_FrontTentacle, dryProgress, Maths.rad(10.0), 0.0f, Maths.rad(-25.0), 5.0f);
        this.progressRotationPrev(this.left_FrontTentacleEnd, dryProgress, Maths.rad(5.0), 0.0f, Maths.rad(-15.0), 5.0f);
        this.progressRotationPrev(this.right_FrontTentacle, dryProgress, Maths.rad(10.0), 0.0f, Maths.rad(15.0), 5.0f);
        this.progressRotationPrev(this.right_tentacleEnd, dryProgress, Maths.rad(5.0), 0.0f, Maths.rad(15.0), 5.0f);
        this.progressRotationPrev(this.left_BackTentacle, dryProgress, 0.0f, 0.0f, Maths.rad(-15.0), 5.0f);
        this.progressRotationPrev(this.left_BackTentacleEnd, dryProgress, 0.0f, 0.0f, Maths.rad(-15.0), 5.0f);
        this.progressRotationPrev(this.right_BackTentacle, dryProgress, 0.0f, 0.0f, Maths.rad(20.0), 5.0f);
        this.progressRotationPrev(this.right_BackTentacleEnd, dryProgress, 0.0f, 0.0f, Maths.rad(25.0), 5.0f);
        this.progressRotationPrev(this.right_BackMidTentacle, dryProgress, Maths.rad(20.0), 0.0f, Maths.rad(20.0), 5.0f);
        this.progressRotationPrev(this.left_BackMidTentacle, dryProgress, Maths.rad(15.0), 0.0f, Maths.rad(-50.0), 5.0f);
        this.progressRotationPrev(this.left_FrontMidTentacle, dryProgress, Maths.rad(35.0), Maths.rad(15.0), Maths.rad(-50.0), 5.0f);
        this.progressRotationPrev(this.left_FrontMidTentacleEnd, dryProgress, Maths.rad(35.0), Maths.rad(-15.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.right_FrontMidTentacle, dryProgress, Maths.rad(35.0), Maths.rad(-15.0), Maths.rad(50.0), 5.0f);
        this.progressRotationPrev(this.right_FrontMidTentacleEnd, dryProgress, Maths.rad(35.0), Maths.rad(15.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.left_arm, dryProgress, Maths.rad(10.0), Maths.rad(90.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.left_arm2, dryProgress, Maths.rad(-10.0), 0.0f, Maths.rad(2.0), 5.0f);
        this.progressRotationPrev(this.left_arm3, dryProgress, 0.0f, 0.0f, Maths.rad(-20.0), 5.0f);
        this.progressRotationPrev(this.left_arm4, dryProgress, 0.0f, 0.0f, Maths.rad(-8.0), 5.0f);
        this.progressRotationPrev(this.right_arm, dryProgress, Maths.rad(10.0), Maths.rad(-90.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.right_arm2, dryProgress, Maths.rad(-10.0), 0.0f, Maths.rad(-4.0), 5.0f);
        this.progressRotationPrev(this.right_arm3, dryProgress, 0.0f, 0.0f, Maths.rad(-12.0), 5.0f);
        this.progressRotationPrev(this.right_arm4, dryProgress, 0.0f, 0.0f, Maths.rad(20.0), 5.0f);
        this.progressRotationPrev(this.left_arm, grabProgress, Maths.rad(-110.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.right_arm, grabProgress, Maths.rad(-110.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.left_arm2, grabProgress, Maths.rad(40.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.right_arm2, grabProgress, Maths.rad(40.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.left_arm3, grabProgress, Maths.rad(100.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.right_arm3, grabProgress, Maths.rad(100.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.left_arm4, grabProgress, Maths.rad(70.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.right_arm4, grabProgress, Maths.rad(70.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.left_hand, grabProgress, Maths.rad(-120.0), 0.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.right_hand, grabProgress, Maths.rad(-120.0), 0.0f, 0.0f, 5.0f);
        this.progressPositionPrev(this.left_arm, grabProgress, 0.0f, 2.0f, 0.0f, 5.0f);
        this.progressPositionPrev(this.right_arm, grabProgress, 0.0f, 2.0f, 0.0f, 5.0f);
        this.progressPositionPrev(this.left_arm4, grabProgress, 0.0f, -2.0f, 1.0f, 5.0f);
        this.progressPositionPrev(this.right_arm4, grabProgress, 0.0f, -2.0f, 1.0f, 5.0f);
        this.progressRotationPrev(this.left_FrontTentacle, Math.max(grabProgress, capturedProgress), Maths.rad(-20.0), Maths.rad(-20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.right_FrontTentacle, Math.max(grabProgress, capturedProgress), Maths.rad(-20.0), Maths.rad(20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.left_BackTentacle, Math.max(grabProgress, capturedProgress), Maths.rad(-20.0), Maths.rad(20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.right_BackTentacle, Math.max(grabProgress, capturedProgress), Maths.rad(-20.0), Maths.rad(-20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.left_FrontMidTentacle, Math.max(grabProgress, capturedProgress), Maths.rad(-20.0), Maths.rad(20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.right_FrontMidTentacle, Math.max(grabProgress, capturedProgress), Maths.rad(-20.0), Maths.rad(-20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.left_BackMidTentacle, Math.max(grabProgress, capturedProgress), Maths.rad(-20.0), Maths.rad(-20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.right_BackMidTentacle, Math.max(grabProgress, capturedProgress), Maths.rad(-20.0), Maths.rad(20.0), 0.0f, 5.0f);
        this.progressRotationPrev(this.mantle, capturedProgress, Maths.rad(-20.0), 0.0f, 0.0f, 5.0f);
        this.progressPositionPrev(this.mantle, capturedProgress, 0.0f, -2.0f, 0.0f, 5.0f);
        this.progressRotationPrev(this.head, capturedProgress, Maths.rad(20.0), 0.0f, 0.0f, 5.0f);
        this.swing(this.right_membrane, swimSpeed, swimDegree, false, 2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.swing(this.left_membrane, swimSpeed, swimDegree, true, 2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.left_FrontTentacle, swimSpeed, swimDegree, true, 0.0f, 0.5f, limbSwing, limbSwingAmount);
        this.flap(this.left_FrontTentacle, swimSpeed, swimDegree, true, 0.0f, 0.35f, limbSwing, limbSwingAmount);
        this.walk(this.right_FrontTentacle, swimSpeed, swimDegree, true, 0.0f, 0.5f, limbSwing, limbSwingAmount);
        this.flap(this.right_FrontTentacle, swimSpeed, swimDegree, false, 0.0f, 0.35f, limbSwing, limbSwingAmount);
        this.walk(this.left_BackTentacle, swimSpeed, swimDegree, true, 0.0f, 0.5f, limbSwing, limbSwingAmount);
        this.flap(this.left_BackTentacle, swimSpeed, swimDegree, true, 0.0f, 0.35f, limbSwing, limbSwingAmount);
        this.walk(this.right_BackTentacle, swimSpeed, swimDegree, true, 0.0f, 0.5f, limbSwing, limbSwingAmount);
        this.flap(this.right_BackTentacle, swimSpeed, swimDegree, false, 0.0f, 0.35f, limbSwing, limbSwingAmount);
        this.walk(this.right_BackMidTentacle, swimSpeed, swimDegree, true, 0.0f, 0.5f, limbSwing, limbSwingAmount);
        this.swing(this.right_BackMidTentacle, swimSpeed, swimDegree, true, 0.0f, -0.75f, limbSwing, limbSwingAmount);
        this.walk(this.right_FrontMidTentacle, swimSpeed, swimDegree, true, 0.0f, 0.5f, limbSwing, limbSwingAmount);
        this.swing(this.right_FrontMidTentacle, swimSpeed, swimDegree, false, 0.0f, -0.75f, limbSwing, limbSwingAmount);
        this.walk(this.left_BackMidTentacle, swimSpeed, swimDegree, true, 0.0f, 0.5f, limbSwing, limbSwingAmount);
        this.swing(this.left_BackMidTentacle, swimSpeed, swimDegree, false, 0.0f, -0.75f, limbSwing, limbSwingAmount);
        this.walk(this.left_FrontMidTentacle, swimSpeed, swimDegree, true, 0.0f, 0.5f, limbSwing, limbSwingAmount);
        this.swing(this.left_FrontMidTentacle, swimSpeed, swimDegree, true, 0.0f, -0.75f, limbSwing, limbSwingAmount);
        this.walk(this.left_FrontTentacleEnd, swimSpeed, swimDegree, true, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.right_tentacleEnd, swimSpeed, swimDegree, true, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.left_BackTentacleEnd, swimSpeed, swimDegree, true, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.right_BackTentacleEnd, swimSpeed, swimDegree, true, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.right_BackMidTentacleEnd, swimSpeed, swimDegree, true, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.left_BackMidTentacleEnd, swimSpeed, swimDegree, true, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.right_FrontMidTentacleEnd, swimSpeed, swimDegree, true, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.left_FrontMidTentacleEnd, swimSpeed, swimDegree, true, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.left_arm, swimSpeed, swimDegree * 0.1f, true, 0.0f, 0.1f, limbSwing, limbSwingAmount);
        this.walk(this.right_arm, swimSpeed, swimDegree * 0.1f, true, 0.0f, 0.1f, limbSwing, limbSwingAmount);
        this.walk(this.left_arm2, swimSpeed, swimDegree * 0.1f, false, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.right_arm2, swimSpeed, swimDegree * 0.1f, false, -2.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.left_arm3, swimSpeed, swimDegree * 0.1f, true, -4.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.right_arm3, swimSpeed, swimDegree * 0.1f, true, -4.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.left_arm4, swimSpeed, swimDegree * 0.2f, true, -6.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.right_arm4, swimSpeed, swimDegree * 0.2f, true, -6.0f, 0.0f, limbSwing, limbSwingAmount);
        this.walk(this.left_arm, flailSpeed, flailDegree, true, 2.0f, 0.7f, ageInTicks, flailAmount);
        this.swing(this.left_arm, flailSpeed, flailDegree, true, 6.0f, 0.7f, ageInTicks, flailAmount);
        this.walk(this.right_arm, flailSpeed, flailDegree, false, 2.0f, -0.7f, ageInTicks, flailAmount);
        this.swing(this.right_arm, flailSpeed, flailDegree, false, 6.0f, -0.7f, ageInTicks, flailAmount);
        this.walk(this.left_arm2, flailSpeed, flailDegree, true, 0.0f, 0.7f, ageInTicks, flailAmount);
        this.walk(this.right_arm2, flailSpeed, flailDegree, false, 0.0f, -0.7f, ageInTicks, flailAmount);
        this.walk(this.left_arm3, flailSpeed, flailDegree, true, 0.0f, 0.7f, ageInTicks, flailAmount);
        this.walk(this.right_arm3, flailSpeed, flailDegree, false, 0.0f, -0.7f, ageInTicks, flailAmount);
        this.walk(this.left_arm4, flailSpeed, flailDegree, true, 0.0f, 0.2f, ageInTicks, flailAmount);
        this.walk(this.right_arm4, flailSpeed, flailDegree, false, 0.0f, -0.2f, ageInTicks, flailAmount);
        this.walk(this.left_hand, flailSpeed, flailDegree, true, 0.0f, 0.2f, ageInTicks, flailAmount);
        this.walk(this.right_hand, flailSpeed, flailDegree, false, 0.0f, -0.2f, ageInTicks, flailAmount);
        this.walk(this.left_FrontTentacle, flailSpeed, flailDegree * 0.5f, false, 0.0f, -0.5f, ageInTicks, flailAmount);
        this.flap(this.left_FrontTentacle, flailSpeed, flailDegree * 0.5f, false, 0.0f, -0.15f, ageInTicks, flailAmount);
        this.walk(this.left_FrontTentacleEnd, flailSpeed, flailDegree * 0.5f, false, 0.0f, -0.85f, ageInTicks, flailAmount);
        this.walk(this.right_FrontTentacle, flailSpeed, flailDegree * 0.5f, false, 2.0f, -0.5f, ageInTicks, flailAmount);
        this.flap(this.right_FrontTentacle, flailSpeed, flailDegree * 0.5f, true, 2.0f, -0.15f, ageInTicks, flailAmount);
        this.walk(this.right_tentacleEnd, flailSpeed, flailDegree * 0.5f, false, 2.0f, -0.85f, ageInTicks, flailAmount);
        this.walk(this.left_BackTentacle, flailSpeed, flailDegree * 0.5f, false, 4.0f, -0.5f, ageInTicks, flailAmount);
        this.flap(this.left_BackTentacle, flailSpeed, flailDegree * 0.5f, false, 4.0f, -0.15f, ageInTicks, flailAmount);
        this.walk(this.left_BackTentacleEnd, flailSpeed, flailDegree * 0.5f, false, 4.0f, -0.85f, ageInTicks, flailAmount);
        this.walk(this.right_BackTentacle, flailSpeed, flailDegree * 0.5f, false, 8.0f, -0.5f, ageInTicks, flailAmount);
        this.flap(this.right_BackTentacle, flailSpeed, flailDegree * 0.5f, true, 8.0f, -0.15f, ageInTicks, flailAmount);
        this.walk(this.right_BackTentacleEnd, flailSpeed, flailDegree * 0.5f, false, 8.0f, -0.85f, ageInTicks, flailAmount);
        this.walk(this.left_BackMidTentacle, flailSpeed, flailDegree * 0.5f, false, 10.0f, -0.5f, ageInTicks, flailAmount);
        this.flap(this.left_BackMidTentacle, flailSpeed, flailDegree * 0.5f, false, 10.0f, -0.15f, ageInTicks, flailAmount);
        this.walk(this.left_BackMidTentacleEnd, flailSpeed, flailDegree * 0.5f, false, 10.0f, -0.85f, ageInTicks, flailAmount);
        this.walk(this.right_BackMidTentacle, flailSpeed, flailDegree * 0.5f, false, 12.0f, -0.5f, ageInTicks, flailAmount);
        this.flap(this.right_BackMidTentacle, flailSpeed, flailDegree * 0.5f, true, 12.0f, -0.15f, ageInTicks, flailAmount);
        this.walk(this.right_BackMidTentacleEnd, flailSpeed, flailDegree * 0.5f, false, 12.0f, -0.85f, ageInTicks, flailAmount);
        this.walk(this.left_FrontMidTentacle, flailSpeed, flailDegree * 0.5f, false, 14.0f, -0.5f, ageInTicks, flailAmount);
        this.flap(this.left_FrontMidTentacle, flailSpeed, flailDegree * 0.5f, false, 14.0f, -0.15f, ageInTicks, flailAmount);
        this.walk(this.left_FrontMidTentacleEnd, flailSpeed, flailDegree * 0.5f, false, 14.0f, -0.85f, ageInTicks, flailAmount);
        this.walk(this.right_FrontMidTentacle, flailSpeed, flailDegree * 0.5f, false, 16.0f, -0.5f, ageInTicks, flailAmount);
        this.flap(this.right_FrontMidTentacle, flailSpeed, flailDegree * 0.5f, true, 16.0f, -0.15f, ageInTicks, flailAmount);
        this.walk(this.right_FrontMidTentacleEnd, flailSpeed, flailDegree * 0.5f, false, 16.0f, -0.85f, ageInTicks, flailAmount);
        this.walk(this.left_FrontTentacle, idleSpeed, idleDegree, true, 0.0f, 0.05f, ageInTicks, 1.0f);
        this.flap(this.left_FrontTentacle, idleSpeed, idleDegree, true, 0.0f, 0.035f, ageInTicks, 1.0f);
        this.walk(this.right_FrontTentacle, idleSpeed, idleDegree, true, 0.0f, 0.05f, ageInTicks, 1.0f);
        this.flap(this.right_FrontTentacle, idleSpeed, idleDegree, false, 0.0f, 0.035f, ageInTicks, 1.0f);
        this.walk(this.left_BackTentacle, idleSpeed, idleDegree, true, 0.0f, 0.05f, ageInTicks, 1.0f);
        this.flap(this.left_BackTentacle, idleSpeed, idleDegree, true, 0.0f, 0.035f, ageInTicks, 1.0f);
        this.walk(this.right_BackTentacle, idleSpeed, idleDegree, true, 0.0f, 0.05f, ageInTicks, 1.0f);
        this.flap(this.right_BackTentacle, idleSpeed, idleDegree, false, 0.0f, 0.035f, ageInTicks, 1.0f);
        this.walk(this.right_BackMidTentacle, idleSpeed, idleDegree, true, 0.0f, 0.05f, ageInTicks, 1.0f);
        this.swing(this.right_BackMidTentacle, idleSpeed, idleDegree, true, 0.0f, -0.075f, ageInTicks, 1.0f);
        this.walk(this.right_FrontMidTentacle, idleSpeed, idleDegree, true, 0.0f, 0.05f, ageInTicks, 1.0f);
        this.swing(this.right_FrontMidTentacle, idleSpeed, idleDegree, false, 0.0f, -0.075f, ageInTicks, 1.0f);
        this.walk(this.left_BackMidTentacle, idleSpeed, idleDegree, true, 0.0f, 0.05f, ageInTicks, 1.0f);
        this.swing(this.left_BackMidTentacle, idleSpeed, idleDegree, false, 0.0f, -0.075f, ageInTicks, 1.0f);
        this.walk(this.left_FrontMidTentacle, idleSpeed, idleDegree, true, 0.0f, 0.05f, ageInTicks, 1.0f);
        this.swing(this.left_FrontMidTentacle, idleSpeed, idleDegree, true, 0.0f, -0.075f, ageInTicks, 1.0f);
        this.walk(this.left_FrontTentacleEnd, idleSpeed, idleDegree, true, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.right_tentacleEnd, idleSpeed, idleDegree, true, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.left_BackTentacleEnd, idleSpeed, idleDegree, true, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.right_BackTentacleEnd, idleSpeed, idleDegree, true, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.right_BackMidTentacleEnd, idleSpeed, idleDegree, true, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.left_BackMidTentacleEnd, idleSpeed, idleDegree, true, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.right_FrontMidTentacleEnd, idleSpeed, idleDegree, true, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.left_FrontMidTentacleEnd, idleSpeed, idleDegree, true, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.left_arm, idleSpeed, idleDegree * 0.1f, true, 0.0f, 0.01f, ageInTicks, 1.0f);
        this.walk(this.right_arm, idleSpeed, idleDegree * 0.1f, true, 0.0f, 0.01f, ageInTicks, 1.0f);
        this.walk(this.left_arm2, idleSpeed, idleDegree * 0.1f, false, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.right_arm2, idleSpeed, idleDegree * 0.1f, false, -2.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.left_arm3, idleSpeed, idleDegree * 0.1f, true, -4.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.right_arm3, idleSpeed, idleDegree * 0.1f, true, -4.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.left_arm4, idleSpeed, idleDegree * 0.2f, true, -6.0f, 0.0f, ageInTicks, 1.0f);
        this.walk(this.right_arm4, idleSpeed, idleDegree * 0.2f, true, -6.0f, 0.0f, ageInTicks, 1.0f);
        this.left_pupil.rotateAngleX += f;
        this.right_pupil.rotateAngleX += f;
        if (grabProgress >= 5.0f) {
            this.walk(this.beak, 0.7f, 0.35f, true, 0.0f, 0.0f, ageInTicks, 1.0f);
            this.bob(this.beak, 0.7f, 0.35f, true, ageInTicks, 1.0f);
        }
        if ((look = Minecraft.m_91087_().m_91288_()) != null) {
            Vec3 vector3d = look.m_20299_(partialTick);
            Vec3 vector3d1 = entity.m_20299_(partialTick);
            float dist = Mth.m_14036_((float)((float)vector3d.m_82546_(vector3d1).m_82553_() * 0.2f), (float)0.4f, (float)1.0f);
            float eyeScale = 1.4f - dist;
            float maxEyeDist = 0.7f;
            double d0 = vector3d.f_82480_ - vector3d1.f_82480_;
            Vec3 vector3d2 = entity.m_20252_(0.0f);
            vector3d2 = new Vec3(vector3d2.f_82479_, 0.0, vector3d2.f_82481_);
            Vec3 vector3d3 = new Vec3(vector3d.f_82479_ - vector3d1.f_82479_, 0.0, vector3d.f_82481_ - vector3d1.f_82481_).m_82541_();
            double d1 = vector3d2.m_82526_(vector3d3);
            double eyeXz = Mth.m_14116_((float)((float)Math.abs(d1))) * -2.0f * (float)Math.signum(d1);
            this.left_pupil.setScale(eyeScale, eyeScale, eyeScale);
            this.left_pupil.rotationPointZ -= (float)Mth.m_14008_((double)(-eyeXz), (double)(-maxEyeDist / eyeScale), (double)(maxEyeDist / eyeScale));
            this.left_pupil.rotationPointY += (float)Mth.m_14008_((double)(-d0), (double)(-maxEyeDist / eyeScale), (double)(maxEyeDist / eyeScale));
            this.right_pupil.setScale(eyeScale, eyeScale, eyeScale);
            this.right_pupil.rotationPointZ += (float)Mth.m_14008_((double)eyeXz, (double)(-maxEyeDist / eyeScale), (double)(maxEyeDist / eyeScale));
            this.right_pupil.rotationPointY += (float)Mth.m_14008_((double)(-d0), (double)(-maxEyeDist / eyeScale), (double)(maxEyeDist / eyeScale));
        }
    }

    private float getArmRot(EntityGiantSquid entity, int offset, float partialTick, boolean pitch) {
        float rotWrap = Mth.m_14177_((float)(entity.getRingBuffer(offset, partialTick, pitch) - entity.getRingBuffer(0, partialTick, pitch)));
        return Mth.m_14036_((float)rotWrap, (float)-50.0f, (float)50.0f) * 0.4f * ((float)Math.PI / 180);
    }

    public Iterable<AdvancedModelBox> getAllParts() {
        return ImmutableList.of((Object)this.root, (Object)this.head, (Object)this.beak, (Object)this.right_pupil_pivot, (Object)this.left_pupil_pivot, (Object)this.left_FrontTentacle, (Object)this.left_FrontTentacleEnd, (Object)this.left_FrontMidTentacle, (Object)this.left_FrontMidTentacleEnd, (Object)this.right_FrontMidTentacle, (Object)this.right_FrontMidTentacleEnd, (Object)this.left_BackMidTentacle, (Object[])new AdvancedModelBox[]{this.left_BackMidTentacleEnd, this.right_BackMidTentacle, this.right_BackMidTentacleEnd, this.left_BackTentacle, this.left_BackTentacleEnd, this.right_BackTentacle, this.right_BackTentacleEnd, this.right_FrontTentacle, this.right_tentacleEnd, this.left_arm, this.left_arm2, this.left_arm3, this.left_arm4, this.left_hand, this.right_arm, this.right_arm2, this.right_arm3, this.right_arm4, this.right_hand, this.left_eye, this.left_pupil, this.right_eye, this.right_pupil, this.mantle, this.mantle_end, this.left_membrane, this.right_membrane});
    }

    public void setRotationAngle(AdvancedModelBox AdvancedModelBox2, float x, float y, float z) {
        AdvancedModelBox2.rotateAngleX = x;
        AdvancedModelBox2.rotateAngleY = y;
        AdvancedModelBox2.rotateAngleZ = z;
    }
}

