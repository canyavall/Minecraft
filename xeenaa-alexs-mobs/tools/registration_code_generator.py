#!/usr/bin/env python3
"""
RegistrationCodeGenerator - Generate registration snippets for entities and items.

Usage:
    python registration_code_generator.py --config configs/fly.json
"""

import json
import argparse
from pathlib import Path


class RegistrationCodeGenerator:
    """Generate registration code snippets from configuration."""

    def __init__(self, config_path: str):
        with open(config_path, 'r', encoding='utf-8') as f:
            self.config = json.load(f)

        self.name = self.config["name"]
        self.name_upper = self.name.upper()
        self.name_lower = self.name.lower()
        self.category = self.config.get("category", "animal")

    def generate_entity_registration(self) -> str:
        """Generate entity type registration code."""
        dims = self.config.get("dimensions", {"width": 0.6, "height": 1.8})
        width = dims["width"]
        height = dims["height"]

        return f"""    // {self.name} Entity Registration
    public static final EntityType<{self.name}Entity> {self.name_upper} = Registry.register(
        Registries.ENTITY_TYPE,
        Identifier.of("xeenaa-alexs-mobs", "{self.name_lower}"),
        EntityType.Builder.create({self.name}Entity::new, SpawnGroup.CREATURE)
            .dimensions({width}f, {height}f)
            .build()
    );"""

    def generate_spawn_egg_registration(self) -> str:
        """Generate spawn egg item registration code."""
        egg_config = self.config.get("spawn_egg", {
            "primary_color": "0x000000",
            "secondary_color": "0xFFFFFF"
        })

        primary = egg_config["primary_color"]
        secondary = egg_config["secondary_color"]

        return f"""    // {self.name} Spawn Egg Registration
    public static final Item {self.name_upper}_SPAWN_EGG = Registry.register(
        Registries.ITEM,
        Identifier.of("xeenaa-alexs-mobs", "{self.name_lower}_spawn_egg"),
        new SpawnEggItem(ModEntities.{self.name_upper}, {primary}, {secondary}, new Item.Settings())
    );"""

    def generate_attributes_registration(self) -> str:
        """Generate entity attributes registration code."""
        return f"""    // {self.name} Attributes Registration
    FabricDefaultAttributeRegistry.register(ModEntities.{self.name_upper}, {self.name}Entity.createAttributes());"""

    def generate_renderer_registration(self) -> str:
        """Generate client-side renderer registration code."""
        return f"""    // {self.name} Renderer Registration (in ClientModInitializer)
    EntityRendererRegistry.register(ModEntities.{self.name_upper}, {self.name}Renderer::new);"""

    def generate_spawn_egg_model(self) -> str:
        """Generate spawn egg item model JSON."""
        return """{
  "parent": "minecraft:item/template_spawn_egg"
}
"""

    def print_all(self):
        """Print all registration code snippets."""
        print("=" * 80)
        print(f"REGISTRATION CODE FOR {self.name_upper}")
        print("=" * 80)

        print("\n// Add to ModEntities.java (server/common)")
        print(self.generate_entity_registration())

        print("\n\n// Add to ModItems.java (server/common)")
        print(self.generate_spawn_egg_registration())

        print("\n\n// Add to mod initializer onInitialize() (server/common)")
        print(self.generate_attributes_registration())

        print("\n\n// Add to ClientModInitializer (client only)")
        print(self.generate_renderer_registration())

        print("\n" + "=" * 80)
        print(f"SPAWN EGG ITEM MODEL")
        print("=" * 80)
        print(f"\nCreate file: src/main/resources/assets/xeenaa-alexs-mobs/models/item/{self.name_lower}_spawn_egg.json")
        print("\nContents:")
        print(self.generate_spawn_egg_model())

    def save_to_file(self, output_path: str):
        """Save all registration code to a file."""
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)

        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"// Registration code for {self.name}\n")
            f.write("// Generated by RegistrationCodeGenerator\n\n")

            f.write("// ===== SERVER/COMMON CODE =====\n\n")
            f.write("// ModEntities.java\n")
            f.write(self.generate_entity_registration())
            f.write("\n\n")

            f.write("// ModItems.java\n")
            f.write(self.generate_spawn_egg_registration())
            f.write("\n\n")

            f.write("// Mod initializer onInitialize()\n")
            f.write(self.generate_attributes_registration())
            f.write("\n\n")

            f.write("// ===== CLIENT CODE =====\n\n")
            f.write("// ClientModInitializer\n")
            f.write(self.generate_renderer_registration())
            f.write("\n\n")

            f.write("// ===== SPAWN EGG MODEL =====\n")
            f.write(f"// File: models/item/{self.name_lower}_spawn_egg.json\n")
            f.write(self.generate_spawn_egg_model())

        print(f"✅ Saved registration code to: {output_file}")

    def save_spawn_egg_model(self, resources_dir: str):
        """Save spawn egg item model JSON file."""
        model_path = Path(resources_dir) / "models" / "item" / f"{self.name_lower}_spawn_egg.json"
        model_path.parent.mkdir(parents=True, exist_ok=True)

        with open(model_path, 'w', encoding='utf-8') as f:
            f.write(self.generate_spawn_egg_model())

        print(f"✅ Saved spawn egg model to: {model_path}")


def main():
    parser = argparse.ArgumentParser(
        description='Generate entity and item registration code'
    )
    parser.add_argument('--config', required=True, help='Input JSON config file')
    parser.add_argument('--output', help='Optional: Save to file instead of printing')
    parser.add_argument('--create-spawn-egg-model', action='store_true',
                        help='Create spawn egg model JSON file')
    parser.add_argument('--resources-dir', default='src/main/resources/assets/xeenaa-alexs-mobs',
                        help='Resources directory for spawn egg model')

    args = parser.parse_args()

    generator = RegistrationCodeGenerator(args.config)

    if args.output:
        generator.save_to_file(args.output)
    else:
        generator.print_all()

    if args.create_spawn_egg_model:
        generator.save_spawn_egg_model(args.resources_dir)


if __name__ == '__main__':
    main()
