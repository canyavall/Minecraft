#!/usr/bin/env python3
"""
ModelRendererGenerator - Generate GeckoLib model and renderer classes.

Usage:
    python model_renderer_generator.py --config configs/fly.json
"""

import json
import argparse
from pathlib import Path


class ModelRendererGenerator:
    """Generate GeckoLib model and renderer classes from configuration."""

    def __init__(self, config_path: str):
        with open(config_path, 'r', encoding='utf-8') as f:
            self.config = json.load(f)

        self.name = self.config["name"]
        self.category = self.config.get("category", "animal")
        self.shadow_radius = self.config.get("renderer", {}).get("shadow_radius", 0.5)

    def generate_model(self) -> str:
        """Generate GeckoLib model class."""
        name = self.name
        name_lower = name.lower()

        return f"""package com.canya.xeenaa_alexs_mobs.client.model;

import com.canya.xeenaa_alexs_mobs.entity.{self.category}.{name}Entity;
import net.minecraft.util.Identifier;
import software.bernie.geckolib.model.GeoModel;

/**
 * GeckoLib model for {name} entity.
 * Generated by ModelRendererGenerator.
 */
public class {name}Model extends GeoModel<{name}Entity> {{
    @Override
    public Identifier getModelResource({name}Entity entity) {{
        return Identifier.of("xeenaa-alexs-mobs", "geo/{name_lower}_citadel.geo.json");
    }}

    @Override
    public Identifier getTextureResource({name}Entity entity) {{
        return Identifier.of("xeenaa-alexs-mobs", "textures/entity/{name_lower}/{name_lower}.png");
    }}

    @Override
    public Identifier getAnimationResource({name}Entity entity) {{
        return Identifier.of("xeenaa-alexs-mobs", "animations/{name_lower}_citadel.animation.json");
    }}
}}
"""

    def generate_renderer(self) -> str:
        """Generate GeckoLib renderer class."""
        name = self.name
        name_lower = name.lower()

        return f"""package com.canya.xeenaa_alexs_mobs.client.renderer;

import com.canya.xeenaa_alexs_mobs.client.model.{name}Model;
import com.canya.xeenaa_alexs_mobs.entity.{self.category}.{name}Entity;
import net.minecraft.client.render.entity.EntityRendererFactory;
import net.minecraft.util.Identifier;
import software.bernie.geckolib.renderer.GeoEntityRenderer;

/**
 * GeckoLib renderer for {name} entity.
 * Generated by ModelRendererGenerator.
 */
public class {name}Renderer extends GeoEntityRenderer<{name}Entity> {{
    public {name}Renderer(EntityRendererFactory.Context renderManager) {{
        super(renderManager, new {name}Model());
        this.shadowRadius = {self.shadow_radius}f;
    }}

    @Override
    public Identifier getTextureLocation({name}Entity entity) {{
        return Identifier.of("xeenaa-alexs-mobs", "textures/entity/{name_lower}/{name_lower}.png");
    }}
}}
"""

    def save_model(self, output_dir: str):
        """Save model class to file."""
        code = self.generate_model()

        output_file = Path(output_dir) / "client" / "model" / f"{self.name}Model.java"
        output_file.parent.mkdir(parents=True, exist_ok=True)

        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(code)

        print(f"✅ Generated model class: {output_file}")

    def save_renderer(self, output_dir: str):
        """Save renderer class to file."""
        code = self.generate_renderer()

        output_file = Path(output_dir) / "client" / "renderer" / f"{self.name}Renderer.java"
        output_file.parent.mkdir(parents=True, exist_ok=True)

        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(code)

        print(f"✅ Generated renderer class: {output_file}")

    def save_both(self, output_dir: str):
        """Save both model and renderer classes."""
        self.save_model(output_dir)
        self.save_renderer(output_dir)


def main():
    parser = argparse.ArgumentParser(
        description='Generate GeckoLib model and renderer classes'
    )
    parser.add_argument('--config', required=True, help='Input JSON config file')
    parser.add_argument('--output', default='src/main/java/com/canya/xeenaa_alexs_mobs',
                        help='Output directory for Java files')

    args = parser.parse_args()

    generator = ModelRendererGenerator(args.config)
    generator.save_both(args.output)


if __name__ == '__main__':
    main()
